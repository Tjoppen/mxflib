// merge this into mxflib/ulmap.h and thus into mxflib/mxflib.h eventually
#ifndef __OPMAP_H__
#define __OPMAP_H__

#include "mxflib/mxflib.h"
using namespace mxflib;

namespace mxflib
{
	// Operational Pattern Labels
	// ==========================
	// DRAGONS: These are often just the degenerate labels - Qualifiers need to be filled in later!

	// OP-Atom - #### DRAGONS: Qualifiers need work later!
	// Note: pre mxflib 0.5.3, byte 8 version was erroneously = 01
	const UInt8 OPAtom_Data[16] = { 0x06, 0x0e, 0x2b, 0x34, 0x04, 0x01, 0x01, 0x02, 0x0d, 0x01, 0x02, 0x01, 0x10, 0x00, 0x00, 0x00 };
	const UL OPAtomUL(OPAtom_Data);

	const UInt8 OPAtom_UL_Data[16] = { 0x06, 0x0e, 0x2b, 0x34, 0x04, 0x01, 0x01, 0x02, 0x0d, 0x01, 0x02, 0x01, 0x10, 0x00, 0x00, 0x00 };
	const UL OPAtom_UL(OPAtom_UL_Data);

	// OP1a - #### DRAGONS: Qualifiers may need work!
	const UInt8 OP1a_Data[16] = { 0x06, 0x0e, 0x2b, 0x34, 0x04, 0x01, 0x01, 0x01, 0x0d, 0x01, 0x02, 0x01, 0x01, 0x01, 0x01, 0x00 };
	const UL OP1aUL(OP1a_Data);

	// OP1b - #### DRAGONS: Qualifiers need work!
	const UInt8 OP1b_Data[16] = { 0x06, 0x0e, 0x2b, 0x34, 0x04, 0x01, 0x01, 0x01, 0x0d, 0x01, 0x02, 0x01, 0x01, 0x02, 0x05, 0x00 };
	const UL OP1bUL(OP1b_Data);

	// OP2a - #### DRAGONS: Qualifiers need work!
	const UInt8 OP2a_Data[16] = { 0x06, 0x0e, 0x2b, 0x34, 0x04, 0x01, 0x01, 0x01, 0x0d, 0x01, 0x02, 0x01, 0x02, 0x01, 0x01, 0x00 };
	const UL OP2aUL(OP2a_Data);

	// OP2b - #### DRAGONS: Qualifiers need work!
	const UInt8 OP2b_Data[16] = { 0x06, 0x0e, 0x2b, 0x34, 0x04, 0x01, 0x01, 0x01, 0x0d, 0x01, 0x02, 0x01, 0x02, 0x02, 0x05, 0x00 };
	const UL OP2bUL(OP2b_Data);
}

#endif   //__OPMAP_H__
